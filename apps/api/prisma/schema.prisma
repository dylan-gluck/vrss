// VRSS Social Platform - Prisma Schema
// Phase 1: Foundation Tables
// Database: PostgreSQL 16

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum UserStatus {
  active
  suspended
  deleted
}

enum ProfileVisibility {
  public
  followers
  private
}

// ============================================
// PHASE 1: FOUNDATION TABLES
// ============================================

// Users & Authentication
model User {
  id            BigInt  @id @default(autoincrement())
  username      String  @unique @db.VarChar(30)
  email         String  @unique @db.VarChar(255)
  emailVerified Boolean @default(false) @map("email_verified")
  passwordHash  String  @map("password_hash") @db.VarChar(255)

  // Account status
  status UserStatus @default(active)

  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  lastLoginAt DateTime? @map("last_login_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)

  // Relations - Phase 1
  profile      UserProfile?
  storageUsage StorageUsage?
  sessions     Session[]

  // Relations - Phase 2 (Content & Social)
  posts            Post[]
  postMedia        PostMedia[]
  followers        UserFollow[]      @relation("UserFollows_Following")
  following        UserFollow[]      @relation("UserFollows_Follower")
  friendships1     Friendship[]      @relation("Friendship_User1")
  friendships2     Friendship[]      @relation("Friendship_User2")
  postInteractions PostInteraction[]
  comments         Comment[]
  reposts          Repost[]

  // Relations - Phase 3 (Profile & Feed Features)
  profileSections ProfileSection[]
  customFeeds     CustomFeed[]
  userLists       UserList[]
  listMemberships ListMember[]

  // Relations - Phase 4 (Communication)
  messages             Message[]
  notifications        Notification[]
  notificationsAsActor Notification[]     @relation("NotificationActor")
  subscriptions        UserSubscription[]

  @@index([email], map: "idx_users_email")
  @@index([status], map: "idx_users_status")
  @@map("users")
}

// User Profiles
model UserProfile {
  id     BigInt @id @default(autoincrement())
  userId BigInt @unique @map("user_id")

  // Basic profile info
  displayName String? @map("display_name") @db.VarChar(100)
  bio         String? @db.Text
  age         Int?
  location    String? @db.VarChar(100)
  website     String? @db.VarChar(500)

  // Profile visibility
  visibility ProfileVisibility @default(public)

  // Profile customization (JSONB for flexibility)
  backgroundConfig Json  @default("{}") @map("background_config") @db.JsonB
  musicConfig      Json? @map("music_config") @db.JsonB
  styleConfig      Json  @default("{}") @map("style_config") @db.JsonB
  layoutConfig     Json  @default("{\"sections\": []}") @map("layout_config") @db.JsonB

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([visibility], map: "idx_user_profiles_visibility")
  @@map("user_profiles")
}

// Subscription Tiers
model SubscriptionTier {
  id                BigInt  @id @default(autoincrement())
  name              String  @unique @db.VarChar(50)
  description       String? @db.Text
  storageBytes      BigInt  @map("storage_bytes")
  priceMonthlyCents Int     @map("price_monthly_cents")
  isActive          Boolean @default(true) @map("is_active")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  subscriptions UserSubscription[]

  @@map("subscription_tiers")
}

// Storage & Quota Tracking
model StorageUsage {
  id     BigInt @id @default(autoincrement())
  userId BigInt @unique @map("user_id")

  // Storage tracking by type
  usedBytes   BigInt @default(0) @map("used_bytes")
  quotaBytes  BigInt @default(52428800) @map("quota_bytes") // 50MB default
  imagesBytes BigInt @default(0) @map("images_bytes")
  videosBytes BigInt @default(0) @map("videos_bytes")
  audioBytes  BigInt @default(0) @map("audio_bytes")
  otherBytes  BigInt @default(0) @map("other_bytes")

  // Timestamps
  lastCalculatedAt DateTime @default(now()) @map("last_calculated_at") @db.Timestamptz(6)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("storage_usage")
}

// Better-auth Session Management
model Session {
  id               BigInt    @id @default(autoincrement())
  userId           BigInt    @map("user_id")
  token            String    @unique @db.VarChar(255)
  expiresAt        DateTime  @map("expires_at") @db.Timestamptz(6)
  ipAddress        String?   @map("ip_address") @db.VarChar(45)
  userAgent        String?   @map("user_agent") @db.Text
  lastActivityAt   DateTime  @default(now()) @map("last_activity_at") @db.Timestamptz(6)
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_sessions_user")
  @@index([token], map: "idx_sessions_token")
  @@index([expiresAt], map: "idx_sessions_expires_at")
  @@map("sessions")
}

// Email Verification Tokens
model VerificationToken {
  id         BigInt   @id @default(autoincrement())
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([identifier, token], map: "verification_token_unique")
  @@index([token], map: "idx_verification_tokens_token")
  @@map("verification_tokens")
}

// ============================================
// PHASE 2: CONTENT & SOCIAL TABLES
// ============================================

enum PostType {
  text_short
  text_long
  image
  image_gallery
  gif
  video_short
  video_long
  song
  album
}

enum PostStatus {
  draft
  published
  scheduled
  deleted
}

enum MediaType {
  image
  gif
  video
  audio
  document
}

enum InteractionType {
  like
  bookmark
  share
}

// Posts & Content
model Post {
  id     BigInt @id @default(autoincrement())
  userId BigInt @map("user_id")

  // Post metadata
  type       PostType
  status     PostStatus         @default(published)
  visibility ProfileVisibility  @default(public)

  // Content
  title       String? @db.VarChar(200)
  content     String? @db.Text
  contentHtml String? @map("content_html") @db.Text

  // Media references
  mediaUrls    Json?   @map("media_urls") @db.JsonB
  thumbnailUrl String? @map("thumbnail_url") @db.VarChar(500)

  // Engagement counters (denormalized)
  likesCount    Int @default(0) @map("likes_count")
  commentsCount Int @default(0) @map("comments_count")
  repostsCount  Int @default(0) @map("reposts_count")
  viewsCount    Int @default(0) @map("views_count")

  // Publishing
  publishedAt  DateTime? @map("published_at") @db.Timestamptz(6)
  scheduledFor DateTime? @map("scheduled_for") @db.Timestamptz(6)

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  media        PostMedia[]
  interactions PostInteraction[]
  comments     Comment[]
  reposts      Repost[]

  @@index([userId, createdAt(sort: Desc), status], map: "idx_posts_user_created")
  @@index([type, createdAt(sort: Desc)], map: "idx_posts_type_created")
  @@index([likesCount(sort: Desc), createdAt(sort: Desc)], map: "idx_posts_engagement_created")
  @@map("posts")
}

// Post Media Files
model PostMedia {
  id     BigInt @id @default(autoincrement())
  postId BigInt @map("post_id")
  userId BigInt @map("user_id")

  // Media metadata
  type          MediaType
  fileUrl       String    @map("file_url") @db.VarChar(500)
  fileSizeBytes BigInt    @map("file_size_bytes")
  mimeType      String    @map("mime_type") @db.VarChar(100)

  // Image/video specific
  width           Int?
  height          Int?
  durationSeconds Int? @map("duration_seconds")

  // Thumbnails
  thumbnailUrl String? @map("thumbnail_url") @db.VarChar(500)

  // Order in gallery
  displayOrder Int @default(0) @map("display_order")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId, displayOrder], map: "idx_post_media_post_order")
  @@map("post_media")
}

// User Follows
model UserFollow {
  id          BigInt @id @default(autoincrement())
  followerId  BigInt @map("follower_id")
  followingId BigInt @map("following_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  follower  User @relation("UserFollows_Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollows_Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId], map: "user_follows_unique")
  @@index([followerId, createdAt(sort: Desc)], map: "idx_user_follows_follower")
  @@index([followingId, createdAt(sort: Desc)], map: "idx_user_follows_following")
  @@map("user_follows")
}

// Friendships (mutual follows)
model Friendship {
  id      BigInt @id @default(autoincrement())
  userId1 BigInt @map("user_id_1")
  userId2 BigInt @map("user_id_2")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user1 User @relation("Friendship_User1", fields: [userId1], references: [id], onDelete: Cascade)
  user2 User @relation("Friendship_User2", fields: [userId2], references: [id], onDelete: Cascade)

  @@unique([userId1, userId2], map: "friendships_unique")
  @@index([userId1, createdAt(sort: Desc)], map: "idx_friendships_user1")
  @@index([userId2, createdAt(sort: Desc)], map: "idx_friendships_user2")
  @@map("friendships")
}

// Post Interactions
model PostInteraction {
  id     BigInt          @id @default(autoincrement())
  userId BigInt          @map("user_id")
  postId BigInt          @map("post_id")
  type   InteractionType

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, type], map: "post_interactions_unique")
  @@index([postId, type, createdAt(sort: Desc)], map: "idx_post_interactions_post_type")
  @@map("post_interactions")
}

// Comments
model Comment {
  id              BigInt  @id @default(autoincrement())
  postId          BigInt  @map("post_id")
  userId          BigInt  @map("user_id")
  parentCommentId BigInt? @map("parent_comment_id")

  content     String  @db.Text
  contentHtml String? @map("content_html") @db.Text

  // Denormalized counters
  likesCount   Int @default(0) @map("likes_count")
  repliesCount Int @default(0) @map("replies_count")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  // Relations
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentReplies")

  @@index([postId, createdAt(sort: Desc)], map: "idx_comments_post_created")
  @@index([parentCommentId, createdAt(sort: Desc)], map: "idx_comments_parent")
  @@map("comments")
}

// Reposts
model Repost {
  id     BigInt @id @default(autoincrement())
  userId BigInt @map("user_id")
  postId BigInt @map("post_id")

  comment String? @db.Text

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], map: "reposts_unique")
  @@index([userId, createdAt(sort: Desc)], map: "idx_reposts_user")
  @@map("reposts")
}

// ============================================
// PHASE 3: PROFILE & FEED FEATURES
// ============================================

enum SectionType {
  feed
  gallery
  links
  static_text
  static_image
  video
  reposts
  friends
  followers
  following
  list
}

enum FilterType {
  post_type
  author
  tag
  date_range
  engagement
}

enum FilterOperator {
  equals
  not_equals
  contains
  greater_than
  less_than
  in_range
}

// Profile Sections
model ProfileSection {
  id     BigInt @id @default(autoincrement())
  userId BigInt @map("user_id")

  type        SectionType
  title       String      @db.VarChar(100)
  description String?     @db.Text

  // Section configuration
  config Json @default("{}") @db.JsonB

  // Positioning
  displayOrder Int     @default(0) @map("display_order")
  isVisible    Boolean @default(true) @map("is_visible")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  content SectionContent[]

  @@index([userId, displayOrder], map: "idx_profile_sections_user_order")
  @@map("profile_sections")
}

// Section Content
model SectionContent {
  id        BigInt @id @default(autoincrement())
  sectionId BigInt @map("section_id")

  contentType String  @db.VarChar(50)
  title       String? @db.VarChar(200)
  content     String? @db.Text
  url         String? @db.VarChar(500)

  displayOrder Int @default(0) @map("display_order")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  section ProfileSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId, displayOrder], map: "idx_section_content_section_order")
  @@map("section_content")
}

// Custom Feeds
model CustomFeed {
  id     BigInt @id @default(autoincrement())
  userId BigInt @map("user_id")

  name        String  @db.VarChar(100)
  description String? @db.Text

  // Feed algorithm config
  algorithmConfig Json @map("algorithm_config") @db.JsonB

  isDefault    Boolean @default(false) @map("is_default")
  displayOrder Int     @default(0) @map("display_order")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  filters FeedFilter[]

  @@unique([userId, name], map: "custom_feeds_user_name_unique")
  @@index([userId, displayOrder], map: "idx_custom_feeds_user")
  @@map("custom_feeds")
}

// Feed Filters
model FeedFilter {
  id     BigInt @id @default(autoincrement())
  feedId BigInt @map("feed_id")

  type     FilterType
  operator FilterOperator
  value    Json           @db.JsonB

  // Logical grouping
  groupId         Int    @default(0) @map("group_id")
  logicalOperator String @default("AND") @map("logical_operator") @db.VarChar(10)

  displayOrder Int @default(0) @map("display_order")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  feed CustomFeed @relation(fields: [feedId], references: [id], onDelete: Cascade)

  @@index([feedId, groupId, displayOrder], map: "idx_feed_filters_feed")
  @@index([type, feedId], map: "idx_feed_filters_type")
  @@map("feed_filters")
}

// User Lists
model UserList {
  id     BigInt @id @default(autoincrement())
  userId BigInt @map("user_id")

  name        String  @db.VarChar(100)
  description String? @db.Text

  isPublic Boolean @default(true) @map("is_public")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  members ListMember[]

  @@unique([userId, name], map: "user_lists_user_name_unique")
  @@index([userId], map: "idx_user_lists_user")
  @@map("user_lists")
}

// List Members
model ListMember {
  id           BigInt @id @default(autoincrement())
  listId       BigInt @map("list_id")
  memberUserId BigInt @map("member_user_id")

  addedAt DateTime @default(now()) @map("added_at") @db.Timestamptz(6)

  // Relations
  list       UserList @relation(fields: [listId], references: [id], onDelete: Cascade)
  memberUser User     @relation(fields: [memberUserId], references: [id], onDelete: Cascade)

  @@unique([listId, memberUserId], map: "list_members_unique")
  @@index([listId], map: "idx_list_members_list")
  @@map("list_members")
}

// ============================================
// PHASE 4: COMMUNICATION TABLES
// ============================================

enum NotificationType {
  follow
  like
  comment
  repost
  mention
  message
  friend_request
  system
}

enum SubscriptionStatus {
  active
  canceled
  expired
  suspended
}

// Conversations
model Conversation {
  id BigInt @id @default(autoincrement())

  participantIds BigInt[] @map("participant_ids")

  lastMessageAt DateTime @default(now()) @map("last_message_at") @db.Timestamptz(6)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  messages Message[]

  @@map("conversations")
}

// Messages
model Message {
  id             BigInt @id @default(autoincrement())
  conversationId BigInt @map("conversation_id")
  senderId       BigInt @map("sender_id")

  content String @db.Text

  // Read tracking
  readBy BigInt[] @default([]) @map("read_by")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt(sort: Desc)], map: "idx_messages_conversation_created")
  @@map("messages")
}

// Notifications
model Notification {
  id     BigInt @id @default(autoincrement())
  userId BigInt @map("user_id")

  type NotificationType

  // Actor and object references
  actorId   BigInt? @map("actor_id")
  postId    BigInt? @map("post_id")
  commentId BigInt? @map("comment_id")

  // Notification content
  title     String  @db.VarChar(200)
  content   String? @db.Text
  actionUrl String? @map("action_url") @db.VarChar(500)

  // Read status
  isRead Boolean   @default(false) @map("is_read")
  readAt DateTime? @map("read_at") @db.Timestamptz(6)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  actor User? @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)], map: "idx_notifications_user_created")
  @@index([userId, isRead], map: "idx_notifications_user_unread")
  @@map("notifications")
}

// User Subscriptions
model UserSubscription {
  id     BigInt @id @default(autoincrement())
  userId BigInt @map("user_id")
  tierId BigInt @map("tier_id")

  status SubscriptionStatus @default(active)

  // Billing
  stripeSubscriptionId String? @map("stripe_subscription_id") @db.VarChar(255)
  stripeCustomerId     String? @map("stripe_customer_id") @db.VarChar(255)

  // Subscription period
  currentPeriodStart DateTime  @map("current_period_start") @db.Timestamptz(6)
  currentPeriodEnd   DateTime  @map("current_period_end") @db.Timestamptz(6)
  canceledAt         DateTime? @map("canceled_at") @db.Timestamptz(6)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier SubscriptionTier @relation(fields: [tierId], references: [id])

  @@index([userId], map: "idx_user_subscriptions_user")
  @@index([status], map: "idx_user_subscriptions_status")
  @@map("user_subscriptions")
}
